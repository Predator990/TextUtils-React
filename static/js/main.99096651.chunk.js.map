{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","p","className","mode","to","title","type","id","href","role","abouttext","textColor","onClick","toggleMode","htmlFor","mode_text","TextForm","useState","text","setText","console","log","heading","for","rows","value","onChange","event","target","style","backgroundColor","TextColor","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","length","prototype","PropTypes","string","isRequired","defaultProps","About","color","myStyle","setMyStyle","btntext","setbtntext","border","setTimeout","Alert","alert","word","lower","charAt","slice","capitalize","msg","App","setMode","modeTextcolor","setTextcolor","modeText","setmodeText","setTextColor","setalert","message","body","background","setInterval","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.99096651.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom';\n\n\nexport default function Navbar(p) {\n    return (\n        <nav className={`navbar navbar-expand-lg navbar-${p.mode} bg-${p.mode}`}>\n        <div className=\"container-fluid\">\n          <Link className=\"navbar-brand\" to=\"/\">{p.title}</Link>\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n              <li className=\"nav-item\">\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/About\">About</Link>\n              </li>\n              <li className=\"nav-item dropdown\">\n                <a className=\"nav-link dropdown-toggle\" href=\"https://www.google.com/\" id=\"navbarDropdown\" role=\"button\" data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\n                  Dropdown\n                </a>\n                <ul className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n                  <li><a className=\"dropdown-item\" href=\"https://www.google.com/\">Action</a></li>\n                  <li><a className=\"dropdown-item\" href=\"https://www.google.com/\">Another action</a></li>\n                  <li><hr className=\"dropdown-divider\"/></li>\n                  <li><a className=\"dropdown-item\" href=\"/\">{p.abouttext}</a></li>\n                </ul>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link disabled\">Disabled</a>\n              </li>\n            </ul>\n            {/* <form className=\"d-flex\">\n              <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n              <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n            </form> */}\n  <div className={`form-check form-switch ${p.textColor}`}>\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault \" onClick={p.toggleMode}/>\n  <label className={`form-check-label ${p.textColor}`} htmlFor=\"flexSwitchCheckDefault \">{p.mode_text}</label>\n</div>\n          </div>\n        </div>\n      </nav>\n    )\n}\n\nNavbar.prototype = {title:PropTypes.string.isRequired,\nabouttext: PropTypes.string}\n\n\nNavbar.defaultProps= {title:'set ttile here',\n    abouttext: 'about text'}","import React,{useState} from 'react'\n\n\n\nexport default function TextForm(p) {\n    const handelUpClick = ()=>{\n       \n        let newText = text.toUpperCase()\n        setText(newText)//corrent way to change the state\n        p.showAlert(\"Converted to upperCase\",\"success\")\n    }\n    const handelLowClick = ()=>{\n       \n        let newText = text.toLowerCase()\n        setText(newText)//corrent way to change the state\n        p.showAlert(\"Converted to LowerCase\",\"success\")\n    }\n\n    //for live update\n    const handleOnChange = (event)=>{\n       \n        setText(event.target.value)\n       \n    }\n    const handelClear = (event)=>{\n       \n        setText('')\n        p.showAlert(\"All Cleared\",\"success\")\n    }\n    const [text, setText] = useState('');\n    console.log(useState('Enter text here'))\n    \n    const handelCopy = (event)=>{\n        var text = document.getElementById('myBox')\n        text.select();\n        navigator.clipboard.writeText(text);\n    }\n    // setText(\"this is the new text\")\n\n\n    return (\n        <>\n           <div className = {`container ${p.textColor}`}>\n               <h1>{p.heading}</h1>\n            <div className=\"mb-3\">\n            <label for=\"exampleFormControlTextarea1\" className=\"form-label\" ></label>\n            <textarea className={`form-control ${p.textColor}`} id=\"myBox\" rows=\"8\" value = {text} onChange={handleOnChange} style={{backgroundColor:p.TextColor}}></textarea>\n            </div>\n            <button className=\"btn btn-primary \" onClick={handelUpClick}>\n                CONVERT TO UPPER CASE\n            </button>\n            <button className=\"btn btn-primary mx-3\" onClick={handelLowClick} >\n                CONVERT TO lower case\n            </button>\n            <button className=\"btn btn-primary mx-3\" onClick={handelClear} >\n                CONVERT TO lower case\n            </button>\n            <button className=\"btn btn-primary mx-3\" onClick={handelCopy} >\n                copy\n            </button>\n            </div>\n            <div className={`container my-2 ${p.textColor}`}>\n            <h1 >your text summary</h1>\n            <p>{text.split(' ').length} words and {text.length} charater</p>\n            <p>{0.008*text.split(' ').length} Minutes read</p>\n            <h3>{text.length>0?text:'Enter the text to preview'}</h3>\n            </div>\n            </>\n    )\n}\n","import React, { useState } from 'react'\n\n\nfunction About() {\n\n    const [myStyle, setMyStyle] = useState(\n    {\n        color:'black',\n        backgroundColor:'white',\n    }\n    )\n\n    const [btntext, setbtntext] = useState(\"Enable dark mode\")\n\n    const toogleStyle = ()=>{\n        if (myStyle.color == 'white'){\n            setMyStyle({\n                color:'black',\n                backgroundColor:'white',\n                border: ' 2px solid white'\n                \n            })\n            setTimeout(() => {\n                setbtntext('Enable dark mode')\n\n                \n            }, 2000);\n        }\n        else{\n            setMyStyle({\n                color:'white',\n                backgroundColor:'black',\n            })\n            setTimeout(() => {\n                setbtntext('Enable light mode')\n            }, 2000);\n            \n        }\n    }\n\n\n    return (\n        <div className=\"container\" style={myStyle}>\n            <h1 className = \"my-3\">About us</h1>\n            <div className=\"accordion\" id=\"accordionExample\">\n            <div className=\"accordion-item\">\n                <h2 className=\"accordion-header\"style={myStyle} id=\"headingOne\">\n                <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n                    Accordion Item #1\n                </button>\n                </h2>\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\" style={myStyle}>\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\"  >\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\n                <button className=\"accordion-button collapsed\"style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\n                    Accordion Item #2\n                </button>\n                </h2>\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" style={myStyle} aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            <div className=\"accordion-item\" >\n                <h2 className=\"accordion-header\" id=\"headingThree\">\n                <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\n                    Accordion Item #3\n                </button>\n                </h2>\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" style={myStyle}  aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n                <div className=\"accordion-body\">\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\n                </div>\n                </div>\n            </div>\n            </div>\n            <div className=\"container\">\n\n            <button type=\"button\" className=\"btn btn-primary my-3\" onClick={toogleStyle}>{btntext}</button>\n            </div>\n                        \n        </div>\n    )\n}\n\nexport default About\n","import React from 'react'\n\nexport default function Alert(p) {\n    const capitalize = (word)=>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\n    }\n    return (\n      p.alert && <div className={`alert alert-${p.alert.type} alert-dismissible fade show`}role=\"alert\">\n        <strong>{capitalize(p.alert.type)}</strong>: {p.alert.msg} \n       \n      </div>\n    )\n}\n","\nimport './Appa.css';\n\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react'\nimport Alert from './Alert';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not \n  const [modeTextcolor, setTextcolor] = useState(''); //whether dark mode is enabled or not \n  const [modeText, setmodeText] = useState('switch to dark mode'); //whether dark mode is enabled or not \n  const [TextColor, setTextColor] = useState('switch to dark mode'); //whether dark mode is enabled or not \n  const [alert, setalert] = useState(null)\n\n  const showAlert = (message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(() => {\n      setalert(\n        null\n      )\n      \n    }, 1500);\n  }\n\n  const toggleMode=()=>{\n    if(mode === 'light'){\n\n      setMode('dark')\n      setTextcolor('text-light')\n      setmodeText('switch to light mode')\n      document.body.style.background = '#343a40'\n      setTextColor('grey')\n      showAlert('Dark mode has been enabled','success')\n      setInterval(() => {\n        document.title = 'TextUtils -Dark Mode'\n      }, 2000);\n\n      setInterval(() => {\n        document.title = 'TextUtils -install now'\n      }, 1500);\n      \n      \n    }\n    else{\n      setMode(\"light\")\n      setTextcolor('')\n      setmodeText('switch to dark mode')\n      document.body.style.background = 'white'\n      setTextColor('white')\n      showAlert('Light mode has been enabled','success')\n      document.title = 'TextUtils -Light Mode'\n    }\n    \n  }\n  return (\n    <>\n     <Router>\n\n<Navbar title='textUtils' abouttext=\"about text lol2\" mode={mode} toggleMode = {toggleMode} textColor = {modeTextcolor} mode_text={modeText}/>\n<Alert alert={alert}/>\n<div className=\"container\">\n<Switch>\n{/* use exact for exact matching */}\n          <Route exact path=\"/About\">  \n            <About />\n          </Route>\n          <Route path=\"/\">\n          <TextForm TextColor={TextColor} textColor = {modeTextcolor} heading='ENTER THE TEXT TO ANALYZE BELOW' showAlert={showAlert}/>\n            \n          </Route>\n        </Switch>\n\n\n\n\n</div>\n</Router>\n    </>\n  );\n}\n\nexport default App;\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}